#! /bin/sh
### BEGIN INIT INFO
# Provides:          rotel-server
# Required-Start:    $all
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Rotel amplifier control
# Description:       Listens for commands to the Rotel amplifier.
### END INIT INFO

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/etc/rotel:/sbin:/usr/sbin:/bin:/usr/bin
DESC="Rotel Server"
NAME=rotel-server
DAEMON=/etc/rotel/$NAME
RUNAS=shairport-sync:shairport-sync

PIDFILE=/var/run/$NAME/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

PATTERN="rotel-server /etc/rotel/rotel-server.rb"

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

#
# Function that starts the daemon/service
#
do_start()
{
    #if [ -r "$PIDFILE" ]; then
    #    PID_IN_FILE=`cat "$PIDFILE"`
    #    if pgrep -f "$PATTERN" | grep "^$PID_IN_FILE\$" >/dev/null; then
    #        echo "$NAME already running ($PID_IN_FILE)" >&2
    #        exit 0
    #    fi
    #fi
    if pgrep -f "$PATTERN" >/dev/null; then
        echo "$NAME already running" >&2
        exit 0
    fi
    start-stop-daemon -c "$RUNAS" --start --quiet --pidfile $PIDFILE --exec $DAEMON || return 3
}

#
# Function that stops the daemon/service
#
do_stop()
{
    pkill -f "$PATTERN"
    if [ -r "$PIDFILE" ]; then
        if pgrep -f "$PATTERN" >/dev/null; then
            PID_IN_FILE=`cat "$PIDFILE"`
            if pgrep -f "$PATTERN" | grep "^$PID_IN_FILE\$" >/dev/null; then
                kill -9 "$PID_IN_FILE"
            fi
        else
            rm -f "$PIDFILE"
        fi
    elif pgrep -f "$PATTERN" >/dev/null; then
        sleep 1
        pkill -9 -f "$PATTERN"
    fi
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
	;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
